console.log("Content script loaded"),window.addEventListener("message",(function(e){e.source==window&&e.data.type&&(e.data.type.startsWith("FROM_PAGE_")||"createPSBT"===e.data.action)&&(console.log("Sending message to extension:",e.data),chrome.runtime.sendMessage(e.data).then((e=>{console.log("Received response from extension:",e),window.postMessage({type:"FROM_EXTENSION",...e},"*")})).catch((e=>{console.error("Error in chrome.runtime.sendMessage:",e),window.postMessage({type:"FROM_EXTENSION",action:"ERROR",message:e.message||"An error occurred"},"*")})))})),chrome.runtime.onMessage.addListener(((e,n,t)=>{if("showConfirmation"===e.action)return console.log("Received showConfirmation request:",e),(o=e.request,new Promise((e=>{const n=document.createElement("div");n.style.cssText="\n                position: fixed;\n                top: 0;\n                left: 0;\n                width: 100%;\n                height: 100%;\n                background-color: rgba(0, 0, 0, 0.5);\n                display: flex;\n                justify-content: center;\n                align-items: center;\n                z-index: 10000;\n            ";const t=document.createElement("div");t.style.cssText="\n                background-color: white;\n                padding: 20px;\n                border-radius: 5px;\n                max-width: 400px;\n            ";const s=document.createElement("p");s.textContent="signMessage"===o.type?"Do you want to sign this message?":"Do you want to sign this PSBT?";const i=document.createElement("pre");i.style.cssText="\n                word-wrap: break-word;\n                white-space: pre-wrap;\n                max-height: 100px;\n                overflow-y: auto;\n            ",i.textContent="signMessage"===o.type?o.message:o.psbtHex;const a=document.createElement("button");a.textContent="Confirm",a.style.marginRight="10px";const r=document.createElement("button");r.textContent="Cancel",t.appendChild(s),t.appendChild(i),t.appendChild(a),t.appendChild(r),n.appendChild(t),a.onclick=()=>{document.body.removeChild(n),console.log("User confirmed"),e({confirmed:!0})},r.onclick=()=>{document.body.removeChild(n),console.log("User cancelled"),e({confirmed:!1})},document.body.appendChild(n)}))).then((e=>{console.log("Confirmation result:",e),t(e)})),!0;var o})),window.postMessage({type:"CONTENT_SCRIPT_LOADED"},"*");
//# sourceMappingURL=data:application/json;charset=utf-8;base64,