(()=>{console.log("Content script loaded"),chrome.runtime.sendMessage({type:"CONTENT_SCRIPT_LOADED"});const e=document.createElement("script");e.src=chrome.runtime.getURL("bitcoinProvider.js"),(document.head||document.documentElement).appendChild(e),chrome.runtime.onMessage.addListener(((e,n,t)=>{return console.log("Content script received message:",e),"fetchBalance"===e.contentScriptQuery?((o=e.url,fetch(o).then((e=>e.json())).catch((e=>({error:e.toString()})))).then((e=>{console.log("Fetch balance response:",e),t(e)})).catch((e=>{console.error("Error fetching balance:",e),t({error:e.toString()})})),!0):"showConfirmation"===e.action?(function(e){return new Promise((n=>{const t=document.createElement("div");t.style.cssText="\n            position: fixed;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n            background-color: rgba(0, 0, 0, 0.5);\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            z-index: 10000;\n        ";const o=document.createElement("div");o.style.cssText="\n            background-color: white;\n            padding: 20px;\n            border-radius: 5px;\n            max-width: 400px;\n        ";const s=document.createElement("p");s.textContent="signMessage"===e.type?"Do you want to sign this message?":"Do you want to sign this PSBT?";const c=document.createElement("pre");c.style.cssText="\n            word-wrap: break-word;\n            white-space: pre-wrap;\n            max-height: 100px;\n            overflow-y: auto;\n        ",c.textContent="signMessage"===e.type?e.message:e.psbtHex;const r=document.createElement("button");r.textContent="Confirm",r.style.marginRight="10px";const i=document.createElement("button");i.textContent="Cancel",o.appendChild(s),o.appendChild(c),o.appendChild(r),o.appendChild(i),t.appendChild(o),r.onclick=()=>{document.body.removeChild(t),console.log("User confirmed"),n({confirmed:!0})},i.onclick=()=>{document.body.removeChild(t),console.log("User cancelled"),n({confirmed:!1})},document.body.appendChild(t)}))}(e.request).then((e=>{console.log("Confirmation result:",e),t(e)})),!0):void 0;var o})),window.addEventListener("message",(function(e){e.source==window&&e.data.type&&"FROM_PAGE"===e.data.type&&chrome.runtime.sendMessage(e.data,(function(n){window.postMessage({type:"FROM_EXTENSION",...n,id:e.data.id},"*")}))})),chrome.runtime.onMessage.addListener(((e,n,t)=>{"FROM_EXTENSION_BACKGROUND"===e.type&&window.postMessage({type:"FROM_EXTENSION",...e},"*")})),window.postMessage({type:"CONTENT_SCRIPT_LOADED"},"*")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,